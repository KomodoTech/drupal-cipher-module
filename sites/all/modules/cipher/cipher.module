<?php

function cipher_menu() {
    $items['cipher'] = array(
        'title' => 'Cipher Shift Example',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cipher_form'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['cipher_success_page'] = array(
        'title' => 'Shifted Input',
        'page callback' => 'cipher_success',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function cipher_form() {
    $form['shift_value'] = array(
        '#title' => 'Shift value',
        '#type' => 'textfield',
        '#description' => t('Please enter your shift number.'),
        '#element_validate' => array('element_validate_integer_positive'),
        '#required' => TRUE,
    );
    $form['shift_direction'] = array(
        '#title' => 'Shift direction',
        '#type' => 'textfield',
        '#description' => t('Please enter a direction (either left or right).'),
        '#element_validate' => array('element_validate_direction'),
        '#required' => TRUE,
    );
    $form['phrase_input'] = array(
        '#title' => 'Phrase Input',
        '#type' => 'textfield',
        '#description' => t('Please enter a phrase you wish to shift.'),
        '#element_validate' => array('element_validate_phrase'),
        '#required' => TRUE,
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Generate Cipher',
    );

    return $form;
}

function element_validate_direction($element) {
    if (!($element['#value'] === 'left' || $element['#value'] === 'right')) {
        form_error($element, t('Please enter either left or right'));
    }
}

function element_validate_phrase($element) {
    $pattern_mostly_alpha = '/^[A-Z\'".?! ]+$/i';
    if (!preg_match($pattern_mostly_alpha, $element['#value'])) {
        form_error($element, t('Please do not use special characters that are not space or punctuation characters'));
    }
}


function shift_letter($character, $shift) {
    $char_ascii = ord($character);

    $alphabet_size = 26;

    $A_ascii = 65;
    $Z_ascii = 90;

    $a_ascii = 97;
    $z_ascii = 122;

    $shift = $shift % $alphabet_size; // normalize to stay in range of alphabetical characters
    $shifted_char = NULL;

    if ($char_ascii >= $A_ascii && $char_ascii <= $Z_ascii) {

        /*
            CASES:

                Shift Left (NEGATIVE):

                    Result < 65:

                            i = 68 ("D")
                            s = -23

                            i + s = 68 - 23 = 45

                            h = max - (i + s) = 90 - 45 = 45

                            l = min - (i + s) = 65 - 45 = 20

                            t = f(h, l) = 20

                            r = max - t = 90 - 20 = 70

                            SHOULD END AT 70 ("F")

                    Result = 65:

                            i = 70 ("F")
                            s = -5

                            i + s = 70 - 5 = 65

                            h = max - (i + s) = 90 - 65 = 25

                            l = min - (i + s) = 65 - 65 = 0

                            t = f(h, l) = 25

                            r = max - t = 65

                            SHOULD END AT 65 ("A")

                    Result > 65:

                            i = 80 ("P")
                            s = -12

                            i + s = 80 - 12 = 68

                            h = max - (i + s) = 90 - 68 = 22

                            l = min - (i + s) = 65 - 68 = -3

                            t = f(h, l) = 22

                            r = max - t = 68

                            SHOULD END AT 68 ("D")


                            DEFINING f(h, l):

                            if (i + s >= 65)
                            {
                                return h;
                            }
                            else {
                                return l;
                            }


                Shift Right (POSITIVE):

                    Result > 90:

                    Result = 90:

                    Result < 90:
        */

        // 68 - 15 = 53
        // 68 % 65 = 3
        // 3 - 15 = 12
        // 122 - 12 = 110

        // 68 - 3 = 65
        // 65 % 65 = 0


        // 68 + 23 = 91
        // 91 % 90 = 1
        // 65 + 1 = 66

        // 86 - 23 = 63
        // 63 % 65 = -2
        // 122 - 2 = 120



        $shifted_char = ($char_ascii + $shift);
    }
    else if ($char_ascii >= $a_ascii && $char_ascii <= $z_ascii) {

        // $shifted_char = ;

    }

    var_dump($char_ascii);
    var_dump($shifted_char);
    var_dump(chr($shifted_char));
    exit;

    return chr($shifted_char);
}

function calculate_cipher($shift, $direction, $phrase)
{
    $shift = intval($shift);
    switch ($direction) {
        case 'left':
            $shift = -$shift;
            break;
        default:
            break;
    }

    $shifted_phrase = "";

    for ($char_index = 0; $char_index < strlen($phrase); $char_index++) {
        $current_char = $phrase[$char_index];

        if (preg_match('/[a-zA-Z]/' , $current_char)) {
            $shifted_phrase = $shifted_phrase . shift_letter($current_char, $shift);
            // var_dump(shift_letter($current_char, $shift));
            // var_dump($shifted_phrase);
            // exit;
        }
        else {
            $shifted_phrase = $shifted_phrase . $current_char;
        }
    }

    return $shifted_phrase;
}

function cipher_form_submit($form, &$form_state) {
    $shift_value = $form_state['values']['shift_value'];
    $shift_direction = $form_state['values']['shift_direction'];
    $phrase_input = $form_state['values']['phrase_input'];

    $cipher_output = calculate_cipher($shift_value, $shift_direction, $phrase_input);

    $_SESSION['cipher_output'] = $cipher_output;

    $form_state['redirect'] = 'cipher_success_page';
}

function cipher_success() {
    $answer = $_SESSION['cipher_output'];
    return 'Your shifted phrase is: ' . strtolower($answer);
}
